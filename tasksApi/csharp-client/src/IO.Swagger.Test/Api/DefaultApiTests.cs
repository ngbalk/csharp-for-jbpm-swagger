/*
 * project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;
        private int taskInstanceId;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
            instance.Configuration.Username = "kieserver";
            instance.Configuration.Password = "kieserver1!";
            ServerQueriesTasksInstancesPotOwnersGetTest();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            ServerQueriesTasksInstancesPotOwnersGetTest();
        }

        [Test]
        public void endToEndTest()
        {
//            ServerQueriesTasksInstancesPotOwnersGetTest();
//            ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutTest();
//            ServerContainersContainerIdTasksTInstanceIdStatesStartedPutTest();
//            ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutObjectParamTest();
            ServerQueriesTasksInstancesPotOwnersGetTest();
            ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutTest();
            ServerContainersContainerIdTasksTInstanceIdStatesStartedPutTest();
            ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutAtomicParamTest();
//            ServerQueriesTasksInstancesPotOwnersGetTest();
//            ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutTest();
//            ServerContainersContainerIdTasksTInstanceIdStatesStartedPutTest();
//            ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutNoneParamTest();
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut
        /// </summary>
        [Test]
        public void ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutTest()
        {
            string containerId = "SVMContainer";
            int? tInstanceId = taskInstanceId;
            var response = instance.ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut(containerId, tInstanceId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        [Test]
        public void ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutNoneParamTest()
        {
            string containerId = "SVMContainer";
            int? tInstanceId = taskInstanceId;
            Object body = null;
            var response = instance.ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut(containerId, tInstanceId, body);
            Assert.IsInstanceOf<string> (response, "response is string");
        }

        [Test]
        public void ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutAtomicParamTest()
        {
            string containerId = "SVMContainer";
            int? tInstanceId = taskInstanceId;
            var taskParams = new Dictionary<string, object>();
            taskParams.Add("occupation", "consultant");
            taskParams.Add("salary", 1000);
            var response = instance.ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut(containerId, tInstanceId, taskParams);
            Assert.IsInstanceOf<string> (response, "response is string");
        }

        [Test]
        public void ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutObjectParamTest()
        {
            string containerId = "SVMContainer";
            int? tInstanceId = taskInstanceId;
            Person person = new Person();
            person.name = "nick";
            person.age = 23;
            var taskVars = new Dictionary<string, object>();
            taskVars.Add("person", person);
            var response = instance.ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut(containerId, tInstanceId, taskVars);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServerContainersContainerIdTasksTInstanceIdStatesStartedPut
        /// </summary>
        [Test]
        public void ServerContainersContainerIdTasksTInstanceIdStatesStartedPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string containerId = "SVMContainer";
            int? tInstanceId = taskInstanceId;
            var response = instance.ServerContainersContainerIdTasksTInstanceIdStatesStartedPut(containerId, tInstanceId);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServerQueriesTasksInstancesPotOwnersGet
        /// </summary>
        [Test]
        public void ServerQueriesTasksInstancesPotOwnersGetTest()
        {
            List<string> groups = null;
            int? page = null;
            int? pageSize = null;
            string sort = null;
            bool? sortOrder = null;
            List<string> status = null;
            string user = null;
            var response = instance.ServerQueriesTasksInstancesPotOwnersGet(groups, page, pageSize, sort, sortOrder, status, user);
            if (response._TaskSummary.Count > 0)
            {
                Console.WriteLine(response._TaskSummary.ElementAt(0));
                taskInstanceId = response._TaskSummary.ElementAt((0)).TaskId;
            }
            Assert.IsInstanceOf<TaskSummary> (response, "response is TaskSummary");
        }
    }

}
