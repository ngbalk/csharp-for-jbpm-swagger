/* 
 * project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDefaultApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>string</returns>
        string ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut (string containerId, int? tInstanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutWithHttpInfo (string containerId, int? tInstanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <param name="body"></param>
        /// <returns>string</returns>
        string ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut (string containerId, int? tInstanceId, Object body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutWithHttpInfo (string containerId, int? tInstanceId, Object body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>string</returns>
        string ServerContainersContainerIdTasksTInstanceIdStatesStartedPut (string containerId, int? tInstanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> ServerContainersContainerIdTasksTInstanceIdStatesStartedPutWithHttpInfo (string containerId, int? tInstanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>TaskSummary</returns>
        TaskSummary ServerQueriesTasksInstancesPotOwnersGet (List<string> groups = null, int? page = null, int? pageSize = null, string sort = null, bool? sortOrder = null, List<string> status = null, string user = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of TaskSummary</returns>
        ApiResponse<TaskSummary> ServerQueriesTasksInstancesPotOwnersGetWithHttpInfo (List<string> groups = null, int? page = null, int? pageSize = null, string sort = null, bool? sortOrder = null, List<string> status = null, string user = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutAsync (string containerId, int? tInstanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutAsyncWithHttpInfo (string containerId, int? tInstanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutAsync (string containerId, int? tInstanceId, Object body);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutAsyncWithHttpInfo (string containerId, int? tInstanceId, Object body);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> ServerContainersContainerIdTasksTInstanceIdStatesStartedPutAsync (string containerId, int? tInstanceId);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> ServerContainersContainerIdTasksTInstanceIdStatesStartedPutAsyncWithHttpInfo (string containerId, int? tInstanceId);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>Task of TaskSummary</returns>
        System.Threading.Tasks.Task<TaskSummary> ServerQueriesTasksInstancesPotOwnersGetAsync (List<string> groups = null, int? page = null, int? pageSize = null, string sort = null, bool? sortOrder = null, List<string> status = null, string user = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>Task of ApiResponse (TaskSummary)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskSummary>> ServerQueriesTasksInstancesPotOwnersGetAsyncWithHttpInfo (List<string> groups = null, int? page = null, int? pageSize = null, string sort = null, bool? sortOrder = null, List<string> status = null, string user = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DefaultApi : IDefaultApi
    {
        private IO.Swagger.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DefaultApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DefaultApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DefaultApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = IO.Swagger.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Swagger.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>string</returns>
        public string ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut (string containerId, int? tInstanceId)
        {
             ApiResponse<string> localVarResponse = ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutWithHttpInfo(containerId, tInstanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutWithHttpInfo (string containerId, int? tInstanceId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut");
            // verify the required parameter 'tInstanceId' is set
            if (tInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'tInstanceId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut");

            var localVarPath = "/server/containers/{containerId}/tasks/{tInstanceId}/states/claimed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (tInstanceId != null) localVarPathParams.Add("tInstanceId", Configuration.ApiClient.ParameterToString(tInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutAsync (string containerId, int? tInstanceId)
        {
             ApiResponse<string> localVarResponse = await ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutAsyncWithHttpInfo(containerId, tInstanceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutAsyncWithHttpInfo (string containerId, int? tInstanceId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut");
            // verify the required parameter 'tInstanceId' is set
            if (tInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'tInstanceId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut");

            var localVarPath = "/server/containers/{containerId}/tasks/{tInstanceId}/states/claimed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (tInstanceId != null) localVarPathParams.Add("tInstanceId", Configuration.ApiClient.ParameterToString(tInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <param name="body"></param>
        /// <returns>string</returns>
        public string ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut (string containerId, int? tInstanceId, Object body)
        {
             ApiResponse<string> localVarResponse = ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutWithHttpInfo(containerId, tInstanceId, body);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <param name="body"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutWithHttpInfo (string containerId, int? tInstanceId, Object body = null)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut");
            // verify the required parameter 'tInstanceId' is set
            if (tInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'tInstanceId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut");
            // verify the required parameter 'body' is set

            var localVarPath = "/server/containers/{containerId}/tasks/{tInstanceId}/states/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (tInstanceId != null) localVarPathParams.Add("tInstanceId", Configuration.ApiClient.ParameterToString(tInstanceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutAsync (string containerId, int? tInstanceId, Object body)
        {
             ApiResponse<string> localVarResponse = await ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutAsyncWithHttpInfo(containerId, tInstanceId, body);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <param name="body"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutAsyncWithHttpInfo (string containerId, int? tInstanceId, Object body)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut");
            // verify the required parameter 'tInstanceId' is set
            if (tInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'tInstanceId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut");
            // verify the required parameter 'body' is set
            if (body == null)
                throw new ApiException(400, "Missing required parameter 'body' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut");

            var localVarPath = "/server/containers/{containerId}/tasks/{tInstanceId}/states/completed";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (tInstanceId != null) localVarPathParams.Add("tInstanceId", Configuration.ApiClient.ParameterToString(tInstanceId)); // path parameter
            if (body != null && body.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(body); // http body (model) parameter
            }
            else
            {
                localVarPostBody = body; // byte array
            }

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>string</returns>
        public string ServerContainersContainerIdTasksTInstanceIdStatesStartedPut (string containerId, int? tInstanceId)
        {
             ApiResponse<string> localVarResponse = ServerContainersContainerIdTasksTInstanceIdStatesStartedPutWithHttpInfo(containerId, tInstanceId);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>ApiResponse of string</returns>
        public ApiResponse< string > ServerContainersContainerIdTasksTInstanceIdStatesStartedPutWithHttpInfo (string containerId, int? tInstanceId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesStartedPut");
            // verify the required parameter 'tInstanceId' is set
            if (tInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'tInstanceId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesStartedPut");

            var localVarPath = "/server/containers/{containerId}/tasks/{tInstanceId}/states/started";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (tInstanceId != null) localVarPathParams.Add("tInstanceId", Configuration.ApiClient.ParameterToString(tInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServerContainersContainerIdTasksTInstanceIdStatesStartedPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> ServerContainersContainerIdTasksTInstanceIdStatesStartedPutAsync (string containerId, int? tInstanceId)
        {
             ApiResponse<string> localVarResponse = await ServerContainersContainerIdTasksTInstanceIdStatesStartedPutAsyncWithHttpInfo(containerId, tInstanceId);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="containerId"></param>
        /// <param name="tInstanceId"></param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<string>> ServerContainersContainerIdTasksTInstanceIdStatesStartedPutAsyncWithHttpInfo (string containerId, int? tInstanceId)
        {
            // verify the required parameter 'containerId' is set
            if (containerId == null)
                throw new ApiException(400, "Missing required parameter 'containerId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesStartedPut");
            // verify the required parameter 'tInstanceId' is set
            if (tInstanceId == null)
                throw new ApiException(400, "Missing required parameter 'tInstanceId' when calling DefaultApi->ServerContainersContainerIdTasksTInstanceIdStatesStartedPut");

            var localVarPath = "/server/containers/{containerId}/tasks/{tInstanceId}/states/started";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (containerId != null) localVarPathParams.Add("containerId", Configuration.ApiClient.ParameterToString(containerId)); // path parameter
            if (tInstanceId != null) localVarPathParams.Add("tInstanceId", Configuration.ApiClient.ParameterToString(tInstanceId)); // path parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServerContainersContainerIdTasksTInstanceIdStatesStartedPut", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<string>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (string) Configuration.ApiClient.Deserialize(localVarResponse, typeof(string)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>TaskSummary</returns>
        public TaskSummary ServerQueriesTasksInstancesPotOwnersGet (List<string> groups = null, int? page = null, int? pageSize = null, string sort = null, bool? sortOrder = null, List<string> status = null, string user = null)
        {
             ApiResponse<TaskSummary> localVarResponse = ServerQueriesTasksInstancesPotOwnersGetWithHttpInfo(groups, page, pageSize, sort, sortOrder, status, user);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>ApiResponse of TaskSummary</returns>
        public ApiResponse< TaskSummary > ServerQueriesTasksInstancesPotOwnersGetWithHttpInfo (List<string> groups = null, int? page = null, int? pageSize = null, string sort = null, bool? sortOrder = null, List<string> status = null, string user = null)
        {

            var localVarPath = "/server/queries/tasks/instances/pot-owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groups != null) localVarQueryParams.Add("groups", Configuration.ApiClient.ParameterToString(groups)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (user != null) localVarQueryParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServerQueriesTasksInstancesPotOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskSummary)));
            
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>Task of TaskSummary</returns>
        public async System.Threading.Tasks.Task<TaskSummary> ServerQueriesTasksInstancesPotOwnersGetAsync (List<string> groups = null, int? page = null, int? pageSize = null, string sort = null, bool? sortOrder = null, List<string> status = null, string user = null)
        {
             ApiResponse<TaskSummary> localVarResponse = await ServerQueriesTasksInstancesPotOwnersGetAsyncWithHttpInfo(groups, page, pageSize, sort, sortOrder, status, user);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="groups"> (optional)</param>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="sort"> (optional)</param>
        /// <param name="sortOrder"> (optional)</param>
        /// <param name="status"> (optional)</param>
        /// <param name="user"> (optional)</param>
        /// <returns>Task of ApiResponse (TaskSummary)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskSummary>> ServerQueriesTasksInstancesPotOwnersGetAsyncWithHttpInfo (List<string> groups = null, int? page = null, int? pageSize = null, string sort = null, bool? sortOrder = null, List<string> status = null, string user = null)
        {

            var localVarPath = "/server/queries/tasks/instances/pot-owners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json", 
                "application/xml"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (groups != null) localVarQueryParams.Add("groups", Configuration.ApiClient.ParameterToString(groups)); // query parameter
            if (page != null) localVarQueryParams.Add("page", Configuration.ApiClient.ParameterToString(page)); // query parameter
            if (pageSize != null) localVarQueryParams.Add("pageSize", Configuration.ApiClient.ParameterToString(pageSize)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter
            if (sortOrder != null) localVarQueryParams.Add("sortOrder", Configuration.ApiClient.ParameterToString(sortOrder)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (user != null) localVarQueryParams.Add("user", Configuration.ApiClient.ParameterToString(user)); // query parameter

            // authentication (basicAuth) required
            // http basic authentication required
            if (!String.IsNullOrEmpty(Configuration.Username) || !String.IsNullOrEmpty(Configuration.Password))
            {
                localVarHeaderParams["Authorization"] = "Basic " + ApiClient.Base64Encode(Configuration.Username + ":" + Configuration.Password);
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ServerQueriesTasksInstancesPotOwnersGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskSummary>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskSummary) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskSummary)));
            
        }

    }
}
