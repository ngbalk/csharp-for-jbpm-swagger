/* 
 * project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;
using Newtonsoft.Json;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
            instance.Configuration.Username = "kieserver";
            instance.Configuration.Password = "kieserver1!";
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test ServerContainersIdProcessesPIdInstancesPostNoParams
        /// </summary>
        [Test]
        public void ServerContainersIdProcessesPIdInstancesPostTestNoParams()
        {
            string id = "SVMContainer";
            string pId = "hellobpm.simpleProcess";
            Object body = null;
            var response = instance.ServerContainersIdProcessesPIdInstancesPost(id, pId, body);
            Assert.IsInstanceOf<string> (response, "response is string");
        }

        /// <summary>
        /// Test ServerContainersIdProcessesPIdInstancesPostAtomicParams
        /// </summary>
        [Test]
        public void ServerContainersIdProcessesPIdInstancesPostTestAtomicParams()
        {
            string id = "SVMContainer";
            string pId = "hellobpm.simpleProcessAtomic";
            var body = new Dictionary<String, String>();
            body.Add("myString", "this is my string");
            var response = instance.ServerContainersIdProcessesPIdInstancesPost(id, pId, body);
            Assert.IsInstanceOf<string> (response, "response is string");
        }

        /// <summary>
        /// Test ServerContainersIdProcessesPIdInstancesPostMapParams
        /// </summary>
        [Test]
        public void ServerContainersIdProcessesPIdInstancesPostTestMapParams()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string id = "SVMContainer";
            string pId = "hellobpm.simpleProcessObject";
            Person person = new Person();
            person.name = "nick";
            person.age = 23;
            // var json = instance.Configuration.ApiClient.Serialize("svm.hello_bpm.Person",person);
            // Console.WriteLine(json);
            var classnameDict = new Dictionary<string, object>();
            classnameDict.Add("svm.hello_bpm.Person", person);

            var body = new Dictionary<string, object>();
            body.Add("person", classnameDict);

            var json = instance.Configuration.ApiClient.Serialize(body);
            Console.WriteLine(json);

            var response = instance.ServerContainersIdProcessesPIdInstancesPost(id, pId, body);
            Assert.IsInstanceOf<string> (response, "response is string");
        }

        [Test]
        public void CustomSerializerTest()
        {

            Person person = new Person();
            person.name = "nick";
            person.age = 23;

            var classnameDict = new Dictionary<string, object>();
            classnameDict.Add("person", person);

            var json = instance.Configuration.ApiClient.Serialize(classnameDict);
            Console.WriteLine(json);
        }

        [Test]
        public void StartProcessWithCustomSerializedObjectTest()
        {   string id = "SVMContainer";
            string pId = "hellobpm.simpleProcessObject";
            Person person = new Person();
            person.name = "nick";
            person.age = 23;

            var processVars = new Dictionary<string, object>();
            processVars.Add("person", person);

            var response = instance.ServerContainersIdProcessesPIdInstancesPost(id, pId, processVars);
            Assert.IsInstanceOf<string> (response, "response is string");
        }

        [Test]
        public void GetTaskListTest()
        {

        }

        [Test]
        public void SerializeCustomPropertyTest()
        {
            var taskSummary = new TaskSummary();
            var list = new List<Task>();

            list.Add(new Task(){TaskId = "1"});

            taskSummary.tasks = list;
            var json = instance.Configuration.ApiClient.Serialize(taskSummary);
            Console.WriteLine(json);


            TaskSummary des = JsonConvert.DeserializeObject<TaskSummary>(json);


            Console.WriteLine(des.tasks.Count);

        }

        
    }

}
