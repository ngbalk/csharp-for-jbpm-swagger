/* 
 * project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Query
    /// </summary>
    [DataContract]
    public partial class Query :  IEquatable<Query>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Query" /> class.
        /// </summary>
        /// <param name="QueryName">QueryName.</param>
        /// <param name="QuerySource">QuerySource.</param>
        /// <param name="QueryExpression">QueryExpression.</param>
        /// <param name="QueryTarget">QueryTarget.</param>
        public Query(string QueryName = default(string), string QuerySource = default(string), string QueryExpression = default(string), string QueryTarget = default(string))
        {
            this.QueryName = QueryName;
            this.QuerySource = QuerySource;
            this.QueryExpression = QueryExpression;
            this.QueryTarget = QueryTarget;
        }
        
        /// <summary>
        /// Gets or Sets QueryName
        /// </summary>
        [DataMember(Name="query-name", EmitDefaultValue=false)]
        public string QueryName { get; set; }
        /// <summary>
        /// Gets or Sets QuerySource
        /// </summary>
        [DataMember(Name="query-source", EmitDefaultValue=false)]
        public string QuerySource { get; set; }
        /// <summary>
        /// Gets or Sets QueryExpression
        /// </summary>
        [DataMember(Name="query-expression", EmitDefaultValue=false)]
        public string QueryExpression { get; set; }
        /// <summary>
        /// Gets or Sets QueryTarget
        /// </summary>
        [DataMember(Name="query-target", EmitDefaultValue=false)]
        public string QueryTarget { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Query {\n");
            sb.Append("  QueryName: ").Append(QueryName).Append("\n");
            sb.Append("  QuerySource: ").Append(QuerySource).Append("\n");
            sb.Append("  QueryExpression: ").Append(QueryExpression).Append("\n");
            sb.Append("  QueryTarget: ").Append(QueryTarget).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as Query);
        }

        /// <summary>
        /// Returns true if Query instances are equal
        /// </summary>
        /// <param name="other">Instance of Query to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Query other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.QueryName == other.QueryName ||
                    this.QueryName != null &&
                    this.QueryName.Equals(other.QueryName)
                ) && 
                (
                    this.QuerySource == other.QuerySource ||
                    this.QuerySource != null &&
                    this.QuerySource.Equals(other.QuerySource)
                ) && 
                (
                    this.QueryExpression == other.QueryExpression ||
                    this.QueryExpression != null &&
                    this.QueryExpression.Equals(other.QueryExpression)
                ) && 
                (
                    this.QueryTarget == other.QueryTarget ||
                    this.QueryTarget != null &&
                    this.QueryTarget.Equals(other.QueryTarget)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.QueryName != null)
                    hash = hash * 59 + this.QueryName.GetHashCode();
                if (this.QuerySource != null)
                    hash = hash * 59 + this.QuerySource.GetHashCode();
                if (this.QueryExpression != null)
                    hash = hash * 59 + this.QueryExpression.GetHashCode();
                if (this.QueryTarget != null)
                    hash = hash * 59 + this.QueryTarget.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
