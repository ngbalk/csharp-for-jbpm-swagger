/* 
 * project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProcessInstance
    /// </summary>
    [DataContract]
    public partial class ProcessInstance :  IEquatable<ProcessInstance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessInstance" /> class.
        /// </summary>
        /// <param name="Initiator">Initiator.</param>
        /// <param name="ProcessInstanceId">ProcessInstanceId.</param>
        /// <param name="ProcessId">ProcessId.</param>
        /// <param name="ProcessName">ProcessName.</param>
        /// <param name="ProcessVersion">ProcessVersion.</param>
        /// <param name="ProcessInstanceState">ProcessInstanceState.</param>
        /// <param name="ContainerId">ContainerId.</param>
        /// <param name="StartDate">StartDate.</param>
        /// <param name="ProcessInstanceDesc">ProcessInstanceDesc.</param>
        /// <param name="CorrelationKey">CorrelationKey.</param>
        /// <param name="ParentInstanceId">ParentInstanceId.</param>
        public ProcessInstance(string Initiator = default(string), int? ProcessInstanceId = default(int?), string ProcessId = default(string), string ProcessName = default(string), string ProcessVersion = default(string), int? ProcessInstanceState = default(int?), string ContainerId = default(string), DateTime? StartDate = default(DateTime?), string ProcessInstanceDesc = default(string), string CorrelationKey = default(string), int? ParentInstanceId = default(int?))
        {
            this.Initiator = Initiator;
            this.ProcessInstanceId = ProcessInstanceId;
            this.ProcessId = ProcessId;
            this.ProcessName = ProcessName;
            this.ProcessVersion = ProcessVersion;
            this.ProcessInstanceState = ProcessInstanceState;
            this.ContainerId = ContainerId;
            this.StartDate = StartDate;
            this.ProcessInstanceDesc = ProcessInstanceDesc;
            this.CorrelationKey = CorrelationKey;
            this.ParentInstanceId = ParentInstanceId;
        }
        
        /// <summary>
        /// Gets or Sets Initiator
        /// </summary>
        [DataMember(Name="initiator", EmitDefaultValue=false)]
        public string Initiator { get; set; }
        /// <summary>
        /// Gets or Sets ProcessInstanceId
        /// </summary>
        [DataMember(Name="process-instance-id", EmitDefaultValue=false)]
        public int? ProcessInstanceId { get; set; }
        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name="process-id", EmitDefaultValue=false)]
        public string ProcessId { get; set; }
        /// <summary>
        /// Gets or Sets ProcessName
        /// </summary>
        [DataMember(Name="process-name", EmitDefaultValue=false)]
        public string ProcessName { get; set; }
        /// <summary>
        /// Gets or Sets ProcessVersion
        /// </summary>
        [DataMember(Name="process-version", EmitDefaultValue=false)]
        public string ProcessVersion { get; set; }
        /// <summary>
        /// Gets or Sets ProcessInstanceState
        /// </summary>
        [DataMember(Name="process-instance-state", EmitDefaultValue=false)]
        public int? ProcessInstanceState { get; set; }
        /// <summary>
        /// Gets or Sets ContainerId
        /// </summary>
        [DataMember(Name="container-id", EmitDefaultValue=false)]
        public string ContainerId { get; set; }
        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [JsonConverter(typeof(DateTimeConverter))]
        [DataMember(Name="start-date", EmitDefaultValue=false)]
        public DateTime? StartDate { get; set; }
        /// <summary>
        /// Gets or Sets ProcessInstanceDesc
        /// </summary>
        [DataMember(Name="process-instance-desc", EmitDefaultValue=false)]
        public string ProcessInstanceDesc { get; set; }
        /// <summary>
        /// Gets or Sets CorrelationKey
        /// </summary>
        [DataMember(Name="correlation-key", EmitDefaultValue=false)]
        public string CorrelationKey { get; set; }
        /// <summary>
        /// Gets or Sets ParentInstanceId
        /// </summary>
        [DataMember(Name="parent-instance-id", EmitDefaultValue=false)]
        public int? ParentInstanceId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessInstance {\n");
            sb.Append("  Initiator: ").Append(Initiator).Append("\n");
            sb.Append("  ProcessInstanceId: ").Append(ProcessInstanceId).Append("\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("  ProcessVersion: ").Append(ProcessVersion).Append("\n");
            sb.Append("  ProcessInstanceState: ").Append(ProcessInstanceState).Append("\n");
            sb.Append("  ContainerId: ").Append(ContainerId).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  ProcessInstanceDesc: ").Append(ProcessInstanceDesc).Append("\n");
            sb.Append("  CorrelationKey: ").Append(CorrelationKey).Append("\n");
            sb.Append("  ParentInstanceId: ").Append(ParentInstanceId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProcessInstance);
        }

        /// <summary>
        /// Returns true if ProcessInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcessInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessInstance other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Initiator == other.Initiator ||
                    this.Initiator != null &&
                    this.Initiator.Equals(other.Initiator)
                ) && 
                (
                    this.ProcessInstanceId == other.ProcessInstanceId ||
                    this.ProcessInstanceId != null &&
                    this.ProcessInstanceId.Equals(other.ProcessInstanceId)
                ) && 
                (
                    this.ProcessId == other.ProcessId ||
                    this.ProcessId != null &&
                    this.ProcessId.Equals(other.ProcessId)
                ) && 
                (
                    this.ProcessName == other.ProcessName ||
                    this.ProcessName != null &&
                    this.ProcessName.Equals(other.ProcessName)
                ) && 
                (
                    this.ProcessVersion == other.ProcessVersion ||
                    this.ProcessVersion != null &&
                    this.ProcessVersion.Equals(other.ProcessVersion)
                ) && 
                (
                    this.ProcessInstanceState == other.ProcessInstanceState ||
                    this.ProcessInstanceState != null &&
                    this.ProcessInstanceState.Equals(other.ProcessInstanceState)
                ) && 
                (
                    this.ContainerId == other.ContainerId ||
                    this.ContainerId != null &&
                    this.ContainerId.Equals(other.ContainerId)
                ) && 
                (
                    this.StartDate == other.StartDate ||
                    this.StartDate != null &&
                    this.StartDate.Equals(other.StartDate)
                ) && 
                (
                    this.ProcessInstanceDesc == other.ProcessInstanceDesc ||
                    this.ProcessInstanceDesc != null &&
                    this.ProcessInstanceDesc.Equals(other.ProcessInstanceDesc)
                ) && 
                (
                    this.CorrelationKey == other.CorrelationKey ||
                    this.CorrelationKey != null &&
                    this.CorrelationKey.Equals(other.CorrelationKey)
                ) && 
                (
                    this.ParentInstanceId == other.ParentInstanceId ||
                    this.ParentInstanceId != null &&
                    this.ParentInstanceId.Equals(other.ParentInstanceId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Initiator != null)
                    hash = hash * 59 + this.Initiator.GetHashCode();
                if (this.ProcessInstanceId != null)
                    hash = hash * 59 + this.ProcessInstanceId.GetHashCode();
                if (this.ProcessId != null)
                    hash = hash * 59 + this.ProcessId.GetHashCode();
                if (this.ProcessName != null)
                    hash = hash * 59 + this.ProcessName.GetHashCode();
                if (this.ProcessVersion != null)
                    hash = hash * 59 + this.ProcessVersion.GetHashCode();
                if (this.ProcessInstanceState != null)
                    hash = hash * 59 + this.ProcessInstanceState.GetHashCode();
                if (this.ContainerId != null)
                    hash = hash * 59 + this.ContainerId.GetHashCode();
                if (this.StartDate != null)
                    hash = hash * 59 + this.StartDate.GetHashCode();
                if (this.ProcessInstanceDesc != null)
                    hash = hash * 59 + this.ProcessInstanceDesc.GetHashCode();
                if (this.CorrelationKey != null)
                    hash = hash * 59 + this.CorrelationKey.GetHashCode();
                if (this.ParentInstanceId != null)
                    hash = hash * 59 + this.ParentInstanceId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
