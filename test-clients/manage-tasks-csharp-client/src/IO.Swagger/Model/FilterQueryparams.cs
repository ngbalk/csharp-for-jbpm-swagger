/* 
 * KieServerTaskManager
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FilterQueryparams
    /// </summary>
    [DataContract]
    public partial class FilterQueryparams :  IEquatable<FilterQueryparams>, IValidatableObject
    {
        /// <summary>
        /// Gets or Sets CondOperator
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum CondOperatorEnum
        {
            
            /// <summary>
            /// Enum ISNULL for "IS_NULL"
            /// </summary>
            [EnumMember(Value = "IS_NULL")]
            ISNULL,
            
            /// <summary>
            /// Enum NOTNULL for "NOT_NULL"
            /// </summary>
            [EnumMember(Value = "NOT_NULL")]
            NOTNULL,
            
            /// <summary>
            /// Enum EQUALSTO for "EQUALS_TO"
            /// </summary>
            [EnumMember(Value = "EQUALS_TO")]
            EQUALSTO,
            
            /// <summary>
            /// Enum NOTEQUALSTO for "NOT_EQUALS_TO"
            /// </summary>
            [EnumMember(Value = "NOT_EQUALS_TO")]
            NOTEQUALSTO,
            
            /// <summary>
            /// Enum LIKETO for "LIKE_TO"
            /// </summary>
            [EnumMember(Value = "LIKE_TO")]
            LIKETO,
            
            /// <summary>
            /// Enum GREATERTHAN for "GREATER_THAN"
            /// </summary>
            [EnumMember(Value = "GREATER_THAN")]
            GREATERTHAN,
            
            /// <summary>
            /// Enum GREATEROREQUALSTO for "GREATER_OR_EQUALS_TO"
            /// </summary>
            [EnumMember(Value = "GREATER_OR_EQUALS_TO")]
            GREATEROREQUALSTO,
            
            /// <summary>
            /// Enum LOWERTHAN for "LOWER_THAN"
            /// </summary>
            [EnumMember(Value = "LOWER_THAN")]
            LOWERTHAN,
            
            /// <summary>
            /// Enum LOWEROREQUALSTO for "LOWER_OR_EQUALS_TO"
            /// </summary>
            [EnumMember(Value = "LOWER_OR_EQUALS_TO")]
            LOWEROREQUALSTO,
            
            /// <summary>
            /// Enum BETWEEN for "BETWEEN"
            /// </summary>
            [EnumMember(Value = "BETWEEN")]
            BETWEEN,
            
            /// <summary>
            /// Enum IN for "IN"
            /// </summary>
            [EnumMember(Value = "IN")]
            IN,
            
            /// <summary>
            /// Enum NOTIN for "NOT_IN"
            /// </summary>
            [EnumMember(Value = "NOT_IN")]
            NOTIN
        }

        /// <summary>
        /// Gets or Sets CondOperator
        /// </summary>
        [DataMember(Name="cond-operator", EmitDefaultValue=false)]
        public CondOperatorEnum? CondOperator { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterQueryparams" /> class.
        /// </summary>
        /// <param name="CondColumn">CondColumn.</param>
        /// <param name="CondOperator">CondOperator.</param>
        /// <param name="CondValues">CondValues.</param>
        public FilterQueryparams(string CondColumn = default(string), CondOperatorEnum? CondOperator = default(CondOperatorEnum?), List<string> CondValues = default(List<string>))
        {
            this.CondColumn = CondColumn;
            this.CondOperator = CondOperator;
            this.CondValues = CondValues;
        }
        
        /// <summary>
        /// Gets or Sets CondColumn
        /// </summary>
        [DataMember(Name="cond-column", EmitDefaultValue=false)]
        public string CondColumn { get; set; }
        /// <summary>
        /// Gets or Sets CondValues
        /// </summary>
        [DataMember(Name="cond-values", EmitDefaultValue=false)]
        public List<string> CondValues { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterQueryparams {\n");
            sb.Append("  CondColumn: ").Append(CondColumn).Append("\n");
            sb.Append("  CondOperator: ").Append(CondOperator).Append("\n");
            sb.Append("  CondValues: ").Append(CondValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FilterQueryparams);
        }

        /// <summary>
        /// Returns true if FilterQueryparams instances are equal
        /// </summary>
        /// <param name="other">Instance of FilterQueryparams to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterQueryparams other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CondColumn == other.CondColumn ||
                    this.CondColumn != null &&
                    this.CondColumn.Equals(other.CondColumn)
                ) && 
                (
                    this.CondOperator == other.CondOperator ||
                    this.CondOperator != null &&
                    this.CondOperator.Equals(other.CondOperator)
                ) && 
                (
                    this.CondValues == other.CondValues ||
                    this.CondValues != null &&
                    this.CondValues.SequenceEqual(other.CondValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CondColumn != null)
                    hash = hash * 59 + this.CondColumn.GetHashCode();
                if (this.CondOperator != null)
                    hash = hash * 59 + this.CondOperator.GetHashCode();
                if (this.CondValues != null)
                    hash = hash * 59 + this.CondValues.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
