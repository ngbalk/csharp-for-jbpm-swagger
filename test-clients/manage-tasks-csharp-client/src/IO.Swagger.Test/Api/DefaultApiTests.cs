/* 
 * project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;
using Newtonsoft.Json;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi("http://10.52.36.22:8080/kie-server/services/rest");
            instance.Configuration.ApiKey.Add("Authorization","eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkF1ZHBIa0tnS2lhZ3Q2U0pxajdVcjFRX3M5USJ9.eyJhdWQiOiJodHRwczovL3d3dy5zZXJ2c21hcnQuc2VydmljZW1hc3Rlci5jb20iLCJpc3MiOiJodHRwOi8vYWRmcy5zZXJ2aWNlbWFzdGVyLmNvbS9hZGZzL3NlcnZpY2VzL3RydXN0IiwiaWF0IjoxNDg3MTg2Mjc4LCJleHAiOjE0ODcyNDAyNzgsIndpbmFjY291bnRuYW1lIjoianJvbGZlIiwiZ3JvdXAiOlsiRG9tYWluIFVzZXJzIiwiU2hhcmVmaWxlIFVzZXJzIiwiQXBwRHluYW1pY3NfQ3VzdG9tX0Rhc2hib2FyZF9WaWV3ZXIiLCJBcHBEeW5hbWljc19EQl9Nb25pdG9yaW5nX1VzZXIiLCJBcHBEeW5hbWljc19TZXJ2ZXJfTW9uaXRvcmluZ19Vc2VyIiwiQXBwRHluYW1pY3NfUmVhZF9Pbmx5X1VzZXIiXSwiYXV0aF90aW1lIjoiMjAxNy0wMi0xNVQxOToxNzo1OC4yNDNaIiwiYXV0aG1ldGhvZCI6InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkUHJvdGVjdGVkVHJhbnNwb3J0IiwidmVyIjoiMS4wIiwiYXBwaWQiOiJhZHByb2QifQ.nuw5PwhfF4C8Bu4CWOQd89aMg4mU8mTh5IB7r9QxHvTfrqKY5N7sVVrzVaFqWR-jm_CF8Rfcp-Yc9_2SltIMJo0WRs_JaEIXU9tX4pvudWsA8pC_ZQ5mcov3oVvxqTD61pI5S1u3FDSIFzTzwDhI-PTCsL4av6XnDdtQw9QHhNxkHQW_JYw_ikCq_tJzMtst6IUnSRZUvmH0XRklOY9ts8Mn3xMgb5arEdVobiL8lzUA1vxk-_DYSIDPFAneIgW9Aycoj9O7twoOvfOzrFNL-mgT_sulxaIuvQsSRheHTfUwByIwU1Hkgq02WhJnhGeAjagOsbTkAoZgRh_EHev_DA");
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut
        /// </summary>
        [Test]
        public void ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int? tInstanceId = null;
            //var response = instance.ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut(containerId, tInstanceId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut
        /// </summary>
        [Test]
        public void ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int? tInstanceId = null;
            //Object body = null;
            //var response = instance.ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut(containerId, tInstanceId, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServerContainersContainerIdTasksTInstanceIdStatesStartedPut
        /// </summary>
        [Test]
        public void ServerContainersContainerIdTasksTInstanceIdStatesStartedPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int? tInstanceId = null;
            //var response = instance.ServerContainersContainerIdTasksTInstanceIdStatesStartedPut(containerId, tInstanceId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServerQueriesTasksInstancesPotOwnersGet
        /// </summary>
        [Test]
        public void ServerQueriesTasksInstancesPotOwnersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> groups = null;
            //int? page = null;
            //int? pageSize = null;
            //string sort = null;
            //bool? sortOrder = null;
            //List<string> status = null;
            //string user = null;
            //var response = instance.ServerQueriesTasksInstancesPotOwnersGet(groups, page, pageSize, sort, sortOrder, status, user);
            //Assert.IsInstanceOf<TaskSummary> (response, "response is TaskSummary");
        }

        [Test]
        public void TestGettingQueryResultsAsStrongTypedTaskInstances()
        {
            string queryName = "getTasks";
            string mapper = Mapper.UserTasksWithVariables.ToString();

            // Build filter
            Filter filter = new Filter();
            FilterQueryparams fqp = new FilterQueryparams();
            // filter on status == Ready
            fqp.CondColumn = "NAME";
            fqp.CondOperator = FilterQueryparams.CondOperatorEnum.IN;
            fqp.CondValues = new List<string> {"Incident"};
            filter.QueryParams = new List<FilterQueryparams>{fqp};

            int? pageSize = null;
            int? page = null;
            dynamic response =  instance.ServerQueriesDefinitionsQueryNameFilteredDataPost(queryName, mapper, pageSize, page, filter);
            var serialized = JsonConvert.SerializeObject(response);
            TaskInstances taskInstances = JsonConvert.DeserializeObject(serialized, typeof(TaskInstances));
            Assert.IsInstanceOf<TaskInstances> (taskInstances, "response is TaskInstances");
            Console.WriteLine(taskInstances.TaskInstance[0]);
        }


        [Test]
        public void TestGettingTaskSummariesByProcessInstanceId()
        {
            int id = 3;
            TaskSummaries ts = instance.ServerQueriesTasksInstancesProcessPInstanceIdGet(id);
            Console.WriteLine(ts.TaskSummary[0]);
        }

        [Test]
        public void TestGettingTaskWithVarsByFilteringOnSingleTaskInstanceId()
        {
            string queryName = "getTasks";
            string mapper = Mapper.UserTasksWithVariables.ToString();

//            // Build filter
//            Filter filter = new Filter();
//            FilterQueryparams fqp = new FilterQueryparams();
//            // filter on status == Ready
//            fqp.CondColumn = "TASKID";
//            fqp.CondOperator = FilterQueryparams.CondOperatorEnum.IN;
//            fqp.CondValues = new List<string> {"7"};
//            filter.QueryParams = new List<FilterQueryparams>{fqp};


            Filter filter = new Filter();
            FilterQueryparams fqp = new FilterQueryparams();
            fqp.CondColumn = "PROCESSID";
            fqp.CondOperator = FilterQueryparams.CondOperatorEnum.EQUALSTO;
            fqp.CondValues = new List<string> {"Hello.SayHello"};
            filter.QueryParams = new List<FilterQueryparams>{fqp};
            dynamic response =  instance.ServerQueriesDefinitionsQueryNameFilteredDataPost(queryName, mapper, 1, 1, filter);
            var serialized = JsonConvert.SerializeObject(response);
            TaskInstances taskInstances = JsonConvert.DeserializeObject(serialized, typeof(TaskInstances));
            Assert.IsInstanceOf<TaskInstances> (taskInstances, "response is TaskInstances");
            Console.WriteLine(taskInstances.TaskInstance[0]);
        }

        [Test]
        public void TestFilteringBasedOnVariableNameAndValue()
        {
            string queryName = "getAllTasks";
            string mapper = "UserTasksWithVariables";

            // Build filter
            Filter filter = new Filter();
//            FilterQueryparams fqp1 = new FilterQueryparams();
//            fqp1.CondColumn = "TVNAME";
//            fqp1.CondOperator = FilterQueryparams.CondOperatorEnum.EQUALSTO;
//            fqp1.CondValues = new List<string> {"SupportActivity"};

//            FilterQueryparams fqp2 = new FilterQueryparams();
//            fqp2.CondColumn = "TVVALUE";
//            fqp2.CondOperator = FilterQueryparams.CondOperatorEnum.EQUALSTO;
//            fqp2.CondValues = new List<string> {"XXXXXXX"};
//            filter.QueryParams = new List<FilterQueryparams>{fqp1,fqp2};

            dynamic response =  instance.ServerQueriesDefinitionsQueryNameFilteredDataPost(queryName, mapper, null, null, filter);
            var serialized = JsonConvert.SerializeObject(response);
            TaskInstances taskInstances = JsonConvert.DeserializeObject(serialized, typeof(TaskInstances));
            Assert.IsInstanceOf<TaskInstances> (taskInstances, "response is TaskInstances");
            Console.WriteLine(taskInstances.TaskInstance[0]);
//            foreach (var var in taskInstances.TaskInstance)
//            {
//                Console.WriteLine(var.TaskInputData["occupation"]);
//            }

        }

        /// <summary>
        /// Test ServerQueriesDefinitionsQueryNamePost
        /// </summary>
        [Test]
        public void ServerQueriesDefinitionsQueryNamePostTest()
        {
            string queryName = "getAllTasks";
            Query q = new Query();
            q.QueryName = "getAllTasks";
            q.QuerySource = "java:jboss/datasources/ExampleDS";
            q.QueryExpression =
                "SELECT ti.*, tv.NAME as TVNAME, tv.VALUE as TVVALUE FROM AUDITTASKIMPL ti, TASKVARIABLEIMPL tv where ti.TASKID = tv.TASKID";
            q.QueryTarget = "CUSTOM";
            instance.ServerQueriesDefinitionsQueryNamePost(queryName, q);
        }

        [Test]
        public void TestFindTasksWithVars()
        {
            var containerName = "someName";
            var taskInstanceId = 1;
            var showTaskInputVars = true;
            var showTaskOutputVars = true;
            var response = instance.ServerContainersContainerIdTasksTInstanceIdGet(containerName, taskInstanceId, showTaskInputVars, showTaskOutputVars);
            Console.WriteLine(response.TaskInputData["SupportActivity"]);
        }


        /// <summary>
        /// Test ServerQueriesDefinitionsQueryNamePost
        /// </summary>
        [Test]
        public void ServerQueriesDefinitionsQueryNameDeleteTest()
        {
            string queryName = "getAllTasks";
            instance.ServerQueriesDefinitionsQueryNameDelete(queryName);

        }

    }

}
