/* 
 * project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;
using Newtonsoft.Json;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi("http://localhost:8081/kie-server/services/rest");
            instance.Configuration.Username = "userA";
            instance.Configuration.Password = "bpmsuite1!";
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut
        /// </summary>
        [Test]
        public void ServerContainersContainerIdTasksTInstanceIdStatesClaimedPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int? tInstanceId = null;
            //var response = instance.ServerContainersContainerIdTasksTInstanceIdStatesClaimedPut(containerId, tInstanceId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut
        /// </summary>
        [Test]
        public void ServerContainersContainerIdTasksTInstanceIdStatesCompletedPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int? tInstanceId = null;
            //Object body = null;
            //var response = instance.ServerContainersContainerIdTasksTInstanceIdStatesCompletedPut(containerId, tInstanceId, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServerContainersContainerIdTasksTInstanceIdStatesStartedPut
        /// </summary>
        [Test]
        public void ServerContainersContainerIdTasksTInstanceIdStatesStartedPutTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int? tInstanceId = null;
            //var response = instance.ServerContainersContainerIdTasksTInstanceIdStatesStartedPut(containerId, tInstanceId);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServerQueriesTasksInstancesPotOwnersGet
        /// </summary>
        [Test]
        public void ServerQueriesTasksInstancesPotOwnersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //List<string> groups = null;
            //int? page = null;
            //int? pageSize = null;
            //string sort = null;
            //bool? sortOrder = null;
            //List<string> status = null;
            //string user = null;
            //var response = instance.ServerQueriesTasksInstancesPotOwnersGet(groups, page, pageSize, sort, sortOrder, status, user);
            //Assert.IsInstanceOf<TaskSummary> (response, "response is TaskSummary");
        }

        [Test]
        public void TestGettingQueryResultsAsStrongTypedTaskSummary()
        {
            string queryName = "getTasks";
            string mapper = "UserTasksWithVariables";
            Object body = null;
            int pageSize = 20;
            dynamic response =  instance.ServerQueriesDefinitionsQueryNameFilteredDataPost(queryName, mapper, pageSize, body);
            var serialized = JsonConvert.SerializeObject(response);
            TaskInstancesWithVars taskInstances = JsonConvert.DeserializeObject(serialized, typeof(TaskInstancesWithVars));
            Assert.IsInstanceOf<TaskInstancesWithVars> (taskInstances, "response is TaskInstancesWithVars");
            Console.WriteLine(taskInstances.TaskInstance[0].TaskInputData);
        }

        /// <summary>
        /// Test ServerQueriesDefinitionsQueryNamePost
        /// </summary>
        [Test]
        public void ServerQueriesDefinitionsQueryNamePostTest()
        {
            string queryName = "getTasks";
            Query q = new Query();
            q.QueryName = "getTasks";
            q.QuerySource = "java:jboss/datasources/ExampleDS";
            q.QueryExpression =
                "SELECT ti.*, tv.NAME as TVNAME, tv.VALUE as TVVALUE, oe.id AS OEID  FROM AUDITTASKIMPL ti, PEOPLEASSIGNMENTS_POTOWNERS  po, ORGANIZATIONALENTITY  oe, TASKVARIABLEIMPL tv where ti.TASKID = po.TASK_ID  and po.ENTITY_ID  = oe.ID and ti.TASKID = tv.TASKID";
            q.QueryTarget = "PO_TASK";
            instance.ServerQueriesDefinitionsQueryNamePost(queryName, q);

        }


        /// <summary>
        /// Test ServerQueriesDefinitionsQueryNamePost
        /// </summary>
        [Test]
        public void ServerQueriesDefinitionsQueryNameDeleteTest()
        {
            string queryName = "getTasks";
            instance.ServerQueriesDefinitionsQueryNameDelete(queryName);

        }

    }

}
