/* 
 * KieServerProcessManager
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ProcessDefinition
    /// </summary>
    [DataContract]
    public partial class ProcessDefinition :  IEquatable<ProcessDefinition>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ProcessDefinition" /> class.
        /// </summary>
        /// <param name="ProcessId">ProcessId.</param>
        /// <param name="ProcessName">ProcessName.</param>
        /// <param name="ProcessVersion">ProcessVersion.</param>
        /// <param name="Package">Package.</param>
        /// <param name="ContainerId">ContainerId.</param>
        public ProcessDefinition(string ProcessId = default(string), string ProcessName = default(string), string ProcessVersion = default(string), string Package = default(string), string ContainerId = default(string))
        {
            this.ProcessId = ProcessId;
            this.ProcessName = ProcessName;
            this.ProcessVersion = ProcessVersion;
            this.Package = Package;
            this.ContainerId = ContainerId;
        }
        
        /// <summary>
        /// Gets or Sets ProcessId
        /// </summary>
        [DataMember(Name="process-id", EmitDefaultValue=false)]
        public string ProcessId { get; set; }
        /// <summary>
        /// Gets or Sets ProcessName
        /// </summary>
        [DataMember(Name="process-name", EmitDefaultValue=false)]
        public string ProcessName { get; set; }
        /// <summary>
        /// Gets or Sets ProcessVersion
        /// </summary>
        [DataMember(Name="process-version", EmitDefaultValue=false)]
        public string ProcessVersion { get; set; }
        /// <summary>
        /// Gets or Sets Package
        /// </summary>
        [DataMember(Name="package", EmitDefaultValue=false)]
        public string Package { get; set; }
        /// <summary>
        /// Gets or Sets ContainerId
        /// </summary>
        [DataMember(Name="container-id", EmitDefaultValue=false)]
        public string ContainerId { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProcessDefinition {\n");
            sb.Append("  ProcessId: ").Append(ProcessId).Append("\n");
            sb.Append("  ProcessName: ").Append(ProcessName).Append("\n");
            sb.Append("  ProcessVersion: ").Append(ProcessVersion).Append("\n");
            sb.Append("  Package: ").Append(Package).Append("\n");
            sb.Append("  ContainerId: ").Append(ContainerId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ProcessDefinition);
        }

        /// <summary>
        /// Returns true if ProcessDefinition instances are equal
        /// </summary>
        /// <param name="other">Instance of ProcessDefinition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProcessDefinition other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.ProcessId == other.ProcessId ||
                    this.ProcessId != null &&
                    this.ProcessId.Equals(other.ProcessId)
                ) && 
                (
                    this.ProcessName == other.ProcessName ||
                    this.ProcessName != null &&
                    this.ProcessName.Equals(other.ProcessName)
                ) && 
                (
                    this.ProcessVersion == other.ProcessVersion ||
                    this.ProcessVersion != null &&
                    this.ProcessVersion.Equals(other.ProcessVersion)
                ) && 
                (
                    this.Package == other.Package ||
                    this.Package != null &&
                    this.Package.Equals(other.Package)
                ) && 
                (
                    this.ContainerId == other.ContainerId ||
                    this.ContainerId != null &&
                    this.ContainerId.Equals(other.ContainerId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.ProcessId != null)
                    hash = hash * 59 + this.ProcessId.GetHashCode();
                if (this.ProcessName != null)
                    hash = hash * 59 + this.ProcessName.GetHashCode();
                if (this.ProcessVersion != null)
                    hash = hash * 59 + this.ProcessVersion.GetHashCode();
                if (this.Package != null)
                    hash = hash * 59 + this.Package.GetHashCode();
                if (this.ContainerId != null)
                    hash = hash * 59 + this.ContainerId.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
