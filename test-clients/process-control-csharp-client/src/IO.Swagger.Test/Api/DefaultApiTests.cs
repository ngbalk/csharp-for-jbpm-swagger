/* 
 * project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi("https://aws01bpms03t.bizt.est.svmt.com:8443/kie-server/services/rest");
//            instance = new DefaultApi("https://10.52.36.22:8443/kie-server/services/rest");
//            instance = new DefaultApi("http://10.52.36.21:8080/kie-server/services/rest");
            instance.Configuration.ApiKey.Add("Authorization","eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IldaVUNaQXZzYXZoVmlUN1VNZkFOS2JUOTIxWSJ9.eyJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjQyMDAiLCJpc3MiOiJodHRwOi8vaHlicmlkLnN2bWxhYnMuY29tL2FkZnMvc2VydmljZXMvdHJ1c3QiLCJpYXQiOjE0ODg0MDIxMTUsImV4cCI6MTQ4ODQwNTcxNSwid2luYWNjb3VudG5hbWUiOiJqb2RhbHRvbiIsImdyb3VwIjpbIkRvbWFpbiBVc2VycyIsIk1pZGRsZXdhcmUgQWRtaW5zIiwiU2VydlNtYXJ0IERldmVsb3BlcnMiLCJTUyBXaXNjb25zaW4gVGVhbSIsIldvcmtmbG93X1Rlc3RlcnMiXSwiYXV0aF90aW1lIjoiMjAxNy0wMy0wMVQyMTowMTo1NC4wNzRaIiwiYXV0aG1ldGhvZCI6InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkUHJvdGVjdGVkVHJhbnNwb3J0IiwidmVyIjoiMS4wIiwiYXBwaWQiOiJsb2NhbC1hZ2VudGRlc2t0b3AifQ.booIRJr0D22c3UtBMaekskzdLWrt-GCTX3O0YJpJVtKn-vZDDKAHKm_88rr-FGUwCDx1NH_-V-UTWbRxhJqfoEsb9lCkifdG8eNxsh4XKkxJ6hTZpVwamKmEogQdD9LjiyyEsDRECEA3MBT6QF0kz-jSuOIvIIleUgHDBMIepfdLwSFzaHiQwHduhjSZ-IDnKl27C0fQKECxx9E7webz9ht-hhYr74hJMkw9DfuLLzoqMNYWnpN4SWjX45fPWQV6-N8fnzF0fctF7uDVFR2wtljxXTEa6cKunqfCYj-KVE3GfqbmmYAL9OdTs50YURYMGwk-QHKGhCskcTgISzapVQ");
//            instance.Configuration.ApiKey.Add("Authorization","Basic dXNlckE6YnBtc3VpdGUxIQ==");

//            X509Store userCaStore = new X509Store(StoreName.Root, StoreLocation.CurrentUser);
//            Console.WriteLine(userCaStore.Certificates.Count);

//            X509Certificate2 certificate1 = new X509Certificate2("/Users/nbalkiss/Documents/ServiceMaster/ssl/aws01bpms03t.cer","bpmsuite1!");
//            X509Certificate2 certificate2 = new X509Certificate2("/Users/nbalkiss/Documents/ServiceMaster/ssl/svmserversubca.cer","bpmsuite1!");
//            X509Certificate2 certificate3 = new X509Certificate2("/Users/nbalkiss/Documents/ServiceMaster/ssl/svminternalsubca.cer","bpmsuite1!");
//            X509Certificate2 certificate4 = new X509Certificate2("/Users/nbalkiss/Documents/ServiceMaster/ssl/svmrootca.cer","");
//            Console.WriteLine(certificate4.Subject);

//            X509Chain chain = new X509Chain();
//            chain.Build(certificate1);
//            Console.WriteLine(chain.ChainElements.Count);

//            instance.Configuration.ApiClient.RestClient.ClientCertificates = new X509Certificate2Collection(){certificate4};
//            Console.WriteLine(instance.Configuration.ApiClient.RestClient.ClientCertificates[0].Issuer);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test ServerContainersContainerIdProcessesInstancesPInstanceIdVariablesGet
        /// </summary>
        [Test]
        public void ServerContainersContainerIdProcessesInstancesPInstanceIdVariablesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int? pInstanceId = null;
            //var response = instance.ServerContainersContainerIdProcessesInstancesPInstanceIdVariablesGet(containerId, pInstanceId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test ServerContainersGet
        /// </summary>
        [Test]
        public void ServerContainersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            var response = instance.ServerContainersGet();
            Console.WriteLine(response.Result.KieContainers.KieContainer.Count);
            Assert.IsInstanceOf<KieContainersStatus> (response, "response is KieContainersStatus");
        }
        
        /// <summary>
        /// Test ServerContainersIdProcessesInstancesPInstanceIdDelete
        /// </summary>
        [Test]
        public void ServerContainersIdProcessesInstancesPInstanceIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? pInstanceId = null;
            //instance.ServerContainersIdProcessesInstancesPInstanceIdDelete(id, pInstanceId);
            
        }
        
        /// <summary>
        /// Test ServerContainersIdProcessesPIdInstancesPost
        /// </summary>
        [Test]
        public void ServerContainersIdProcessesPIdInstancesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string pId = null;
            //Object body = null;
            //var response = instance.ServerContainersIdProcessesPIdInstancesPost(id, pId, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServerQueriesContainersIdProcessInstancesGet
        /// </summary>
        [Test]
        public void ServerQueriesContainersIdProcessInstancesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string id = "test:firststep:1.0.7";
            int? status = 1;
            var response = instance.ServerQueriesContainersIdProcessInstancesGet(id, status);
//            foreach (var pi in response.ProcessInstance)
//            {
//                Console.WriteLine(pi.ProcessInstanceId);
//                instance.ServerContainersIdProcessesInstancesPInstanceIdDelete("test:firststep:1.0.7",pi.ProcessInstanceId);
//
//            }
            Assert.IsInstanceOf<ProcessInstances> (response, "response is ProcessInstances");
        }
        
        /// <summary>
        /// Test ServerQueriesProcessesInstancesPInstanceIdGet
        /// </summary>
        [Test]
        public void ServerQueriesProcessesInstancesPInstanceIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pInstanceId = null;
            //var response = instance.ServerQueriesProcessesInstancesPInstanceIdGet(pInstanceId);
            //Assert.IsInstanceOf<ProcessInstance> (response, "response is ProcessInstance");
        }

        [Test]
        public void TestDeleteProcess()
        {
            instance.ServerContainersIdProcessesInstancesPInstanceIdDelete("test:firststep:1.0.7",27);
        }

        [Test]
        public void TestGetProcessDefinition()
        {
            var containerId = "test:firststep:1.0.4";
            var processId = "Hello.SayHello";
            ProcessDefinition processDefinition = instance.ServerContainersContainerIdProcessesDefinitionsProcessIdGet(containerId,processId);
            instance.ServerContainersIdProcessesInstancesPInstanceIdDelete("containerId",1111);

        }
        
    }

}
