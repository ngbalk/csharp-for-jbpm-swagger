/* 
 * project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi("http://localhost:8081/kie-server/services/rest");
            instance.Configuration.Username = "userA";
            instance.Configuration.Password = "bpmsuite1!";
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test ServerContainersContainerIdProcessesInstancesPInstanceIdVariablesGet
        /// </summary>
        [Test]
        public void ServerContainersContainerIdProcessesInstancesPInstanceIdVariablesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int? pInstanceId = null;
            //var response = instance.ServerContainersContainerIdProcessesInstancesPInstanceIdVariablesGet(containerId, pInstanceId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test ServerContainersGet
        /// </summary>
        [Test]
        public void ServerContainersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ServerContainersGet();
            //Assert.IsInstanceOf<KieContainersStatus> (response, "response is KieContainersStatus");
        }
        
        /// <summary>
        /// Test ServerContainersIdProcessesInstancesPInstanceIdDelete
        /// </summary>
        [Test]
        public void ServerContainersIdProcessesInstancesPInstanceIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? pInstanceId = null;
            //instance.ServerContainersIdProcessesInstancesPInstanceIdDelete(id, pInstanceId);
            
        }
        
        /// <summary>
        /// Test ServerContainersIdProcessesPIdInstancesPost
        /// </summary>
        [Test]
        public void ServerContainersIdProcessesPIdInstancesPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //string pId = null;
            //Object body = null;
            //var response = instance.ServerContainersIdProcessesPIdInstancesPost(id, pId, body);
            //Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        /// <summary>
        /// Test ServerQueriesContainersIdProcessInstancesGet
        /// </summary>
        [Test]
        public void ServerQueriesContainersIdProcessInstancesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string id = null;
            //int? status = null;
            //var response = instance.ServerQueriesContainersIdProcessInstancesGet(id, status);
            //Assert.IsInstanceOf<ProcessInstances> (response, "response is ProcessInstances");
        }
        
        /// <summary>
        /// Test ServerQueriesProcessesInstancesPInstanceIdGet
        /// </summary>
        [Test]
        public void ServerQueriesProcessesInstancesPInstanceIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pInstanceId = null;
            //var response = instance.ServerQueriesProcessesInstancesPInstanceIdGet(pInstanceId);
            //Assert.IsInstanceOf<ProcessInstance> (response, "response is ProcessInstance");
        }

        [Test]
        public void TestGetProcessDefinitions()
        {
            string regexFilter = "myProcessName";
            int? page = null;
            int? pageSize = null;
            ProcessDefinitions processDefinitions = instance.ServerQueriesProcessesDefinitionsGet(regexFilter,page,pageSize);
        }
        
    }

}
