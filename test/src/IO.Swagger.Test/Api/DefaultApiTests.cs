/* 
 * KieServerProcessManager
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Dynamic;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DefaultApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
//            instance.Configuration.Username = "kieserver";
//            instance.Configuration.Password = "kieserver1!";

            instance.Configuration.ApiKey.Add("Authorization","Basic a2llc2VydmVyOmtpZXNlcnZlcjEh");
            instance.Configuration.ApiClient.AddToTypeRegistry("org.rhc.renewals.common.ServiceResponse",typeof(ServiceResponse));
//            instance.Configuration.ApiKey.Add("Authorization","eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IldaVUNaQXZzYXZoVmlUN1VNZkFOS2JUOTIxWSJ9.eyJhdWQiOiJodHRwOi8vbG9jYWxob3N0OjQyMDAiLCJpc3MiOiJodHRwOi8vaHlicmlkLnN2bWxhYnMuY29tL2FkZnMvc2VydmljZXMvdHJ1c3QiLCJpYXQiOjE0ODg0MDIxMTUsImV4cCI6MTQ4ODQwNTcxNSwid2luYWNjb3VudG5hbWUiOiJqb2RhbHRvbiIsImdyb3VwIjpbIkRvbWFpbiBVc2VycyIsIk1pZGRsZXdhcmUgQWRtaW5zIiwiU2VydlNtYXJ0IERldmVsb3BlcnMiLCJTUyBXaXNjb25zaW4gVGVhbSIsIldvcmtmbG93X1Rlc3RlcnMiXSwiYXV0aF90aW1lIjoiMjAxNy0wMy0wMVQyMTowMTo1NC4wNzRaIiwiYXV0aG1ldGhvZCI6InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOlBhc3N3b3JkUHJvdGVjdGVkVHJhbnNwb3J0IiwidmVyIjoiMS4wIiwiYXBwaWQiOiJsb2NhbC1hZ2VudGRlc2t0b3AifQ.booIRJr0D22c3UtBMaekskzdLWrt-GCTX3O0YJpJVtKn-vZDDKAHKm_88rr-FGUwCDx1NH_-V-UTWbRxhJqfoEsb9lCkifdG8eNxsh4XKkxJ6hTZpVwamKmEogQdD9LjiyyEsDRECEA3MBT6QF0kz-jSuOIvIIleUgHDBMIepfdLwSFzaHiQwHduhjSZ-IDnKl27C0fQKECxx9E7webz9ht-hhYr74hJMkw9DfuLLzoqMNYWnpN4SWjX45fPWQV6-N8fnzF0fctF7uDVFR2wtljxXTEa6cKunqfCYj-KVE3GfqbmmYAL9OdTs50YURYMGwk-QHKGhCskcTgISzapVQ");
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DefaultApi
            //Assert.IsInstanceOfType(typeof(DefaultApi), instance, "instance is a DefaultApi");
        }

        
        /// <summary>
        /// Test ServerContainersContainerIdProcessesDefinitionsProcessIdGet
        /// </summary>
        [Test]
        public void ServerContainersContainerIdProcessesDefinitionsProcessIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //string processId = null;
            //var response = instance.ServerContainersContainerIdProcessesDefinitionsProcessIdGet(containerId, processId);
            //Assert.IsInstanceOf<ProcessDefinition> (response, "response is ProcessDefinition");
        }

        [Test]
        public void StartProcess()
        {
            string id = "SVMContainer";
            string pId = "hellobpm.serviceOrchestrationProcess";
            Object body = null;
            var response = instance.ServerContainersIdProcessesPIdInstancesPost(id, pId, body);
            Console.WriteLine(response);
        }

        [Test]
        public void SignalA()
        {
            string id = "SVMContainer";
            string pId = "3";
            string signalName = "A";

            var body = "!@#$%";

            var response = instance.ServerContainersContainerIdProcessesInstancesPInstanceIdSignalSignalNamePost(id, pId, signalName, body);
            Assert.IsInstanceOf<string> (response, "response is string");
        }

        [Test]
        public void SignalB()
        {
            string id = "SVMContainer";
            string pId = "1";
            string signalName = "B";

            var body = new Dictionary<String, String>();
            body.Add("renewalId","123456");
            body.Add("ccmpId","ABCDEF");

            var response = instance.ServerContainersContainerIdProcessesInstancesPInstanceIdSignalSignalNamePost(id, pId, signalName, body);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        [Test]
        public void SignalResponse()
        {
            string id = "SVMContainer";
            string pId = "8";
            string signalName = "A";

            // failed response
            ServiceResponse serviceResponse = new ServiceResponse();
            serviceResponse.Data = new Dictionary<string, string>(){{"uID","12345"},{"pId","abcdef"}};
            serviceResponse.Message = "FAIL";
            serviceResponse.WorkerName = "my-worker";
            serviceResponse.WorkerCallState = new ServiceResponseWorkerCallState();
            serviceResponse.WorkerCallState.Completed = false;
            WorkerError workerError = new WorkerError();
            workerError.Description = "This failed!";
            workerError.Severity = WorkerError.SeverityEnum.Severe;
            workerError.ErrorID = "ERROR1234";
            serviceResponse.WorkerCallState.Errors = new List<WorkerError>();
            serviceResponse.WorkerCallState.Errors.Add(workerError);
            
            // success response
//            ServiceResponse serviceResponse = new ServiceResponse();
//            serviceResponse.Data = new Dictionary<string, string>(){{"uID","12345"},{"pId","abcdef"}};
//            serviceResponse.Message = "SUCCESS";
//            serviceResponse.WorkerName = "my-worker";
//            serviceResponse.WorkerCallState = new ServiceResponseWorkerCallState();
//            serviceResponse.WorkerCallState.Completed = true;
          
//            dynamic body = new ExpandoObject();
//            body.Data = new ExpandoObject();
//            body.Data.uID = "12345";
//            body.Data.pId = "abcdef";
//            body.Message = "SUCCESS";
//            body.WorkerName = "try-again";
//            body.WorkerCallState = new ExpandoObject();
//            body.WorkerCallState.Completed = true;

            var response = instance.ServerContainersContainerIdProcessesInstancesPInstanceIdSignalSignalNamePost(id, pId, signalName, serviceResponse);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        
        /// <summary>
        /// Test ServerContainersContainerIdProcessesInstancesPInstanceIdVariablesGet
        /// </summary>
        [Test]
        public void ServerContainersContainerIdProcessesInstancesPInstanceIdVariablesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string containerId = null;
            //int? pInstanceId = null;
            //var response = instance.ServerContainersContainerIdProcessesInstancesPInstanceIdVariablesGet(containerId, pInstanceId);
            //Assert.IsInstanceOf<Object> (response, "response is Object");
        }
        
        /// <summary>
        /// Test ServerContainersGet
        /// </summary>
        [Test]
        public void ServerContainersGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.ServerContainersGet();
            //Assert.IsInstanceOf<KieContainersStatus> (response, "response is KieContainersStatus");
        }
        
        /// <summary>
        /// Test ServerContainersIdProcessesInstancesPInstanceIdDelete
        /// </summary>
        [Test]
        public void ServerContainersIdProcessesInstancesPInstanceIdDeleteTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string id = "SVMContainer";
            int? pInstanceId = 2;
            instance.ServerContainersIdProcessesInstancesPInstanceIdDelete(id, pInstanceId);
            
        }
        
        /// <summary>
        /// Test ServerQueriesContainersIdProcessInstancesGet
        /// </summary>
        [Test]
        public void ServerQueriesContainersIdProcessInstancesGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            string id = "SVMContainer";
            int? status = null;
            ProcessInstances response = instance.ServerQueriesContainersIdProcessInstancesGet(id, status);
            Console.WriteLine(response);
        }
        
        /// <summary>
        /// Test ServerQueriesProcessesInstancesPInstanceIdGet
        /// </summary>
        [Test]
        public void ServerQueriesProcessesInstancesPInstanceIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pInstanceId = null;
            //var response = instance.ServerQueriesProcessesInstancesPInstanceIdGet(pInstanceId);
            //Assert.IsInstanceOf<ProcessInstance> (response, "response is ProcessInstance");
        }
        
    }

}
