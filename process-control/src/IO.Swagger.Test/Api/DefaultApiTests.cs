/* 
 * project
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;
using Newtonsoft.Json;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class StartProcessApiTests
    {
        private DefaultApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new DefaultApi();
            instance.Configuration.ApiKey.Add("Authorization","eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6IkF1ZHBIa0tnS2lhZ3Q2U0pxajdVcjFRX3M5USJ9.eyJhdWQiOiJodHRwOi8vMTAuNTMuNDMuODQ6ODA4MC9idXNpbmVzcy1jZW50cmFsIiwiaXNzIjoiaHR0cDovL2FkZnMuc2VydmljZW1hc3Rlci5jb20vYWRmcy9zZXJ2aWNlcy90cnVzdCIsImlhdCI6MTUwMDQ3NDM5NCwiZXhwIjoxNTAwNDc3OTk0LCJ3aW5hY2NvdW50bmFtZSI6Im5iYWxraXNzIiwiZ3JvdXAiOlsiRG9tYWluIFVzZXJzIiwiQXBwRHluYW1pY3NfQ3VzdG9tX0Rhc2hib2FyZF9WaWV3ZXIiLCJBcHBEeW5hbWljc19EQl9Nb25pdG9yaW5nX1VzZXIiLCJBcHBEeW5hbWljc19TZXJ2ZXJfTW9uaXRvcmluZ19Vc2VyIiwiQXBwRHluYW1pY3NfUmVhZF9Pbmx5X1VzZXIiLCJTU0RldiIsIlNTVGVzdCJdLCJhdXRoX3RpbWUiOiIyMDE3LTA3LTE5VDE0OjI2OjM0LjQxOVoiLCJhdXRobWV0aG9kIjoidXJuOm9hc2lzOm5hbWVzOnRjOlNBTUw6Mi4wOmFjOmNsYXNzZXM6UGFzc3dvcmRQcm90ZWN0ZWRUcmFuc3BvcnQiLCJ2ZXIiOiIxLjAiLCJhcHBpZCI6ImJ1c2luZXNzX2NlbnRyYWxfZGV2In0.aDTmLr9DiDatrIUymtBLBAJv3pRLM-gnL8NUlawBeW9jiOHAPm3JiofimQ3ibNtTWEBvibf92yH04jZjfnK5uUYa29ZDCNfqqLr3ocOrZh58e0gheWLJSk8s6e9lPs_y-0lsIMyVsQrXd48dsmaUVPn1AULGLsSy6PO871BdvtwoNxcMpnloC4U7Pe9PGPDBbDijc9TQQ92eTqFzXmTxvTJa6qEWip1zKZnUJyTtn44uTT1oBKbK4IpYs7vmvdmzgzFScl8-CvFnYyAhUozNvK3VVibY6AKdIwlPBS6GPNfPpn6BRss4BWtK4wm26V-UbTiw1zZik-xo0d2QE-p3JQ");
            instance.Configuration.ApiClient.AddToTypeRegistry("org.rhc.workflow.common.ServiceResponse", typeof(ServiceResponse));
            instance.Configuration.ApiClient.AddToTypeRegistry("org.rhc.workflow.models.IncidentData", typeof(IncidentData));
            instance.Configuration.ApiClient.AddToTypeRegistry("org.rhc.workflow.models.PaymentData", typeof(PaymentData));

        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            instance.Configuration.ApiClient.clearTypeRegistry();
        }

        /// <summary>
        /// Test ServerContainersIdProcessesPIdInstancesPostNoParams
        /// </summary>
        [Test]
        public void ServerContainersIdProcessesPIdInstancesPostTestNoParams()
        {
            string id = "SVMContainer";
            string pId = "hellobpm.simpleProcess";
            Object body = null;
            var response = instance.ServerContainersIdProcessesPIdInstancesPost(id, pId, body);
            Assert.IsInstanceOf<string> (response, "response is string");
        }

        /// <summary>
        /// Test ServerContainersIdProcessesPIdInstancesPostAtomicParams
        /// </summary>
        [Test]
        public void ServerContainersIdProcessesPIdInstancesPostTestAtomicParams()
        {
            string id = "SVMContainer";
            string pId = "hellobpm.simpleProcessAtomic";
            var body = new Dictionary<String, String>();
            body.Add("myString", "this is my string");
            var response = instance.ServerContainersIdProcessesPIdInstancesPost(id, pId, body);
            Assert.IsInstanceOf<string> (response, "response is string");
        }


        [Test]
        public void StartIncidentsProcess()
        {   string id = "org.bpm.workflow:Incidents:1.0.5";
            string pId = "Incidents.Incidents";
            IncidentData incidentData = new IncidentData();
            incidentData.IncidentType = "AAA";
            incidentData.OrganizationId = "BBB";
            incidentData.SupportActivityId = "CCC";
            var processVars = new Dictionary<string, object>();
            processVars.Add("incidentData", incidentData);
            var response = instance.ServerContainersIdProcessesPIdInstancesPost(id, pId, processVars);
            Console.WriteLine(response);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        [Test]
        public void StartWorkerTestProcessWithPaymentData()
        {   string id = "org.bpm.workflow:WorkerTest:1.0.11";
            string pId = "WorkerTest.WorkerTest";
            PaymentData paymentData = new PaymentData();
            paymentData.PaymentId = "AAA";
            paymentData.RetryId = "BBB";
            
            var processVars = new Dictionary<string, object>();
            processVars.Add("data", paymentData);
            processVars.Add("workerUrl", "$TEST:http://10.207.230.234:3000/payment");
            var response = instance.ServerContainersIdProcessesPIdInstancesPost(id, pId, processVars);
            Console.WriteLine(response);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
        
        [Test]
        public void SignalWorkerTestProcess()
        
        {   string id = "org.bpm.workflow:WorkerTest:1.0.11";
            string pId = "91";
            string signalName = "A";
            
            ServiceResponse serviceResponse = new ServiceResponse();
            
            PaymentData paymentData = new PaymentData();
            paymentData.PaymentId = "AAA";
            paymentData.RetryId = "BBB";
            
            serviceResponse.Data = paymentData;
            serviceResponse.Message = "SUCCESS";
            ServiceResponseWorkerCallState workerCallState = new ServiceResponseWorkerCallState();
            workerCallState.Completed = true;
            serviceResponse.WorkerCallState = workerCallState; 

//            serviceResponse.DataType = "example.data.type";
            
            var response = instance.ServerContainersContainerIdProcessesInstancesPInstanceIdSignalSignalNamePost(id, pId, signalName,serviceResponse);
            Console.WriteLine(response);
            Assert.IsInstanceOf<string> (response, "response is string");
        }
    }

}
