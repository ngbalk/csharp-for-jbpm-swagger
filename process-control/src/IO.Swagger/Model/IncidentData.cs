/* 
 * KieServerProcessManager
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// IncidentData
    /// </summary>
    [DataContract]
    public partial class IncidentData :  IEquatable<IncidentData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IncidentData" /> class.
        /// </summary>
        /// <param name="SupportActivityId">SupportActivityId.</param>
        /// <param name="OrganizationId">OrganizationId.</param>
        /// <param name="IncidentType">IncidentType.</param>
        public IncidentData(string SupportActivityId = default(string), string OrganizationId = default(string), string IncidentType = default(string))
        {
            this.SupportActivityId = SupportActivityId;
            this.OrganizationId = OrganizationId;
            this.IncidentType = IncidentType;
        }
        
        /// <summary>
        /// Gets or Sets SupportActivityId
        /// </summary>
        [DataMember(Name="SupportActivityId", EmitDefaultValue=false)]
        public string SupportActivityId { get; set; }
        /// <summary>
        /// Gets or Sets OrganizationId
        /// </summary>
        [DataMember(Name="OrganizationId", EmitDefaultValue=false)]
        public string OrganizationId { get; set; }
        /// <summary>
        /// Gets or Sets IncidentType
        /// </summary>
        [DataMember(Name="IncidentType", EmitDefaultValue=false)]
        public string IncidentType { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IncidentData {\n");
            sb.Append("  SupportActivityId: ").Append(SupportActivityId).Append("\n");
            sb.Append("  OrganizationId: ").Append(OrganizationId).Append("\n");
            sb.Append("  IncidentType: ").Append(IncidentType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as IncidentData);
        }

        /// <summary>
        /// Returns true if IncidentData instances are equal
        /// </summary>
        /// <param name="other">Instance of IncidentData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IncidentData other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.SupportActivityId == other.SupportActivityId ||
                    this.SupportActivityId != null &&
                    this.SupportActivityId.Equals(other.SupportActivityId)
                ) && 
                (
                    this.OrganizationId == other.OrganizationId ||
                    this.OrganizationId != null &&
                    this.OrganizationId.Equals(other.OrganizationId)
                ) && 
                (
                    this.IncidentType == other.IncidentType ||
                    this.IncidentType != null &&
                    this.IncidentType.Equals(other.IncidentType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.SupportActivityId != null)
                    hash = hash * 59 + this.SupportActivityId.GetHashCode();
                if (this.OrganizationId != null)
                    hash = hash * 59 + this.OrganizationId.GetHashCode();
                if (this.IncidentType != null)
                    hash = hash * 59 + this.IncidentType.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
