/* 
 * KieServerProcessManager
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0-SNAPSHOT
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ServiceResponse
    /// </summary>
    [DataContract]
    public partial class ServiceResponse :  IEquatable<ServiceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ServiceResponse" /> class.
        /// </summary>
        /// <param name="Message">Message.</param>
        /// <param name="WorkerName">WorkerName.</param>
        /// <param name="Data">Data.</param>
        /// <param name="DataType">DataType.</param>
        /// <param name="SignalInstanceInfo">SignalInstanceInfo.</param>
        /// <param name="WorkerCallState">WorkerCallState.</param>
        public ServiceResponse(string Message = default(string), string WorkerName = default(string), Object Data = default(Object), string DataType = default(string), ServiceResponseSignalInstanceInfo SignalInstanceInfo = default(ServiceResponseSignalInstanceInfo), ServiceResponseWorkerCallState WorkerCallState = default(ServiceResponseWorkerCallState))
        {
            this.Message = Message;
            this.WorkerName = WorkerName;
            this.Data = Data;
            this.DataType = DataType;
            this.SignalInstanceInfo = SignalInstanceInfo;
            this.WorkerCallState = WorkerCallState;
        }
        
        /// <summary>
        /// Gets or Sets Message
        /// </summary>
        [DataMember(Name="Message", EmitDefaultValue=false)]
        public string Message { get; set; }
        /// <summary>
        /// Gets or Sets WorkerName
        /// </summary>
        [DataMember(Name="WorkerName", EmitDefaultValue=false)]
        public string WorkerName { get; set; }
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="Data", EmitDefaultValue=false)]
//        [JsonConverter(typeof(CustomObjectTypeSerializer))]
        public Object Data { get; set; }
        /// <summary>
        /// Gets or Sets DataType
        /// </summary>
        [DataMember(Name="DataType", EmitDefaultValue=false)]
        public string DataType { get; set; }
        /// <summary>
        /// Gets or Sets SignalInstanceInfo
        /// </summary>
        [DataMember(Name="SignalInstanceInfo", EmitDefaultValue=false)]
        public ServiceResponseSignalInstanceInfo SignalInstanceInfo { get; set; }
        /// <summary>
        /// Gets or Sets WorkerCallState
        /// </summary>
        [DataMember(Name="WorkerCallState", EmitDefaultValue=false)]
        public ServiceResponseWorkerCallState WorkerCallState { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServiceResponse {\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  WorkerName: ").Append(WorkerName).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  DataType: ").Append(DataType).Append("\n");
            sb.Append("  SignalInstanceInfo: ").Append(SignalInstanceInfo).Append("\n");
            sb.Append("  WorkerCallState: ").Append(WorkerCallState).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ServiceResponse);
        }

        /// <summary>
        /// Returns true if ServiceResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ServiceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServiceResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Message == other.Message ||
                    this.Message != null &&
                    this.Message.Equals(other.Message)
                ) && 
                (
                    this.WorkerName == other.WorkerName ||
                    this.WorkerName != null &&
                    this.WorkerName.Equals(other.WorkerName)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                ) && 
                (
                    this.DataType == other.DataType ||
                    this.DataType != null &&
                    this.DataType.Equals(other.DataType)
                ) && 
                (
                    this.SignalInstanceInfo == other.SignalInstanceInfo ||
                    this.SignalInstanceInfo != null &&
                    this.SignalInstanceInfo.Equals(other.SignalInstanceInfo)
                ) && 
                (
                    this.WorkerCallState == other.WorkerCallState ||
                    this.WorkerCallState != null &&
                    this.WorkerCallState.Equals(other.WorkerCallState)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Message != null)
                    hash = hash * 59 + this.Message.GetHashCode();
                if (this.WorkerName != null)
                    hash = hash * 59 + this.WorkerName.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.DataType != null)
                    hash = hash * 59 + this.DataType.GetHashCode();
                if (this.SignalInstanceInfo != null)
                    hash = hash * 59 + this.SignalInstanceInfo.GetHashCode();
                if (this.WorkerCallState != null)
                    hash = hash * 59 + this.WorkerCallState.GetHashCode();
                return hash;
            }
        }

        public IEnumerable<ValidationResult> Validate(ValidationContext validationContext)
        { 
            yield break;
        }
    }

}
